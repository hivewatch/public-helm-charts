apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "clamav.fullname" . }}
  labels:
    {{- include "clamav.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "clamav.fullname" . }}
  selector:
    matchLabels:
      {{- include "clamav.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.podAnnotations }}
        {{ toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        {{- include "clamav.selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{ toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "clamav.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.initContainers }}
      initContainers:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        {{- with .Values.extraContainers }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        - name: tailscale
          image: {{ .Values.tailscale.image }}
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000      
            runAsGroup: 1000
          ports:
            - name: tailscale
              containerPort: {{ .Values.tailscale.httpProxy.port }}              
              protocol: TCP
          env:
          - name: TS_EXTRA_ARGS
            value: --accept-routes
          - name: TS_OUTBOUND_HTTP_PROXY_LISTEN
            value: 0.0.0.0:{{ .Values.tailscale.httpProxy.port }}
          - name: KUBERNETES_SERVICE_HOST
            value: ""
            # Store the state in a k8s secret
          - name: TS_KUBE_SECRET
            value: {{ .Values.tailscale.authKeySecretName }}
          - name: TS_AUTHKEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.tailscale.authKeySecretName }}
                key: TS_AUTHKEY
                optional: true
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "%s_base" .Chart.AppVersion) }}"
          command:
            - {{ include "clamav.entrypoint" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
          {{- if .Values.freshclamConfig }}
          - name: freshclam-config-volume
            mountPath: /etc/clamav/freshclam.conf
            subPath: freshclam.conf
          {{- end }}
          {{- if .Values.clamdConfig }}
          - name: clamd-config-volume
            mountPath: /etc/clamav/clamd.conf
            subPath: clamd.conf
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- toYaml .Values.extraVolumeMounts | nindent 10 }}
          {{- end }}
          - name: clamav-data
            mountPath: /data
          ports:
            - name: clamavport
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          startupProbe:
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            tcpSocket:
              port: clamavport
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            tcpSocket:
              port: clamavport
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            tcpSocket:
              port: clamavport
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.freshclamConfig }}
        - name: freshclam-config-volume
          configMap:
            name: {{ include "clamav.fullname" . }}-freshclam
        {{- end }}
        {{- if .Values.clamdConfig }}
        - name: clamd-config-volume
          configMap:
            name: {{ include "clamav.fullname" . }}-clamd
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
  {{- if not .Values.persistentVolume.enabled }}
        - name: clamav-data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: clamav-data
        labels:
          {{- include "clamav.labels" . | nindent 10 }}
        {{- if .Values.persistentVolume.annotations }}
        annotations:
          {{- .Values.persistentVolume.annotations | toYaml | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistentVolume.storageClass }}
        {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
  {{- end }}
